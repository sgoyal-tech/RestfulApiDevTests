name: API Tests CI Pipeline

# Trigger the workflow on push or pull request
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  test:
    name: Run API Tests
    runs-on: windows-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: List directory structure for debugging
      - name: 🔍 Debug - List Directory Structure
        shell: pwsh
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "`nDirectory contents:"
          Get-ChildItem -Recurse -Depth 2 | Select-Object FullName

      # Step 3: Setup .NET SDK
      - name: 🔧 Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Step 4: Display .NET version
      - name: 📋 Display .NET version
        run: dotnet --version

      # Step 5: Find and restore project
      - name: 📦 Restore Dependencies
        shell: pwsh
        run: |
          $projectFile = Get-ChildItem -Recurse -Filter "*.csproj" | Select-Object -First 1
          if ($projectFile) {
            Write-Host "Found project file: $($projectFile.FullName)"
            dotnet restore $projectFile.FullName
          } else {
            Write-Error "No .csproj file found!"
            exit 1
          }

      # Step 6: Build the project
      - name: 🏗️ Build Project
        shell: pwsh
        run: |
          $projectFile = Get-ChildItem -Recurse -Filter "*.csproj" | Select-Object -First 1
          dotnet build $projectFile.FullName --configuration Release --no-restore

      # Step 7: Run the tests
      - name: 🧪 Run API Tests
        shell: pwsh
        run: |
          $projectFile = Get-ChildItem -Recurse -Filter "*.csproj" | Select-Object -First 1
          dotnet test $projectFile.FullName `
            --configuration Release `
            --no-build `
            --verbosity normal `
            --logger "trx;LogFileName=test-results.trx" `
            --logger "html;LogFileName=test-results.html" `
            --results-directory TestResults
        continue-on-error: true

      # Step 8: Publish test results
      - name: 📊 Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          files: |
            TestResults/**/*.trx
          check_name: 'API Test Results'
          comment_title: '🧪 API Test Results'

      # Step 9: Upload test results as artifacts
      - name: 📤 Upload Test Results Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/
          retention-days: 30

      # Step 10: Generate test summary
      - name: 📝 Generate Test Summary
        if: always()
        shell: pwsh
        run: |
          $summary = @"
          # 🧪 API Test Execution Summary
          
          ## Test Configuration
          - **API Under Test**: restful-api.dev
          - **Endpoint Tested**: PATCH /objects/{id}
          - **.NET Version**: ${{ env.DOTNET_VERSION }}
          - **OS**: Windows
          - **Run Date**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          - **Commit**: ${{ github.sha }}
          
          "@
          
          if (Test-Path "TestResults\test-results.trx") {
            $summary += "`n✅ Test results generated successfully`n"
            $summary += "`n📊 Test results are available in the artifacts section`n"
          } else {
            $summary += "`n⚠️ Test results file not found`n"
          }
          
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $summary

      # Step 11: Check test outcome and fail if needed
      - name: ✅ Verify Test Results
        shell: pwsh
        run: |
          if (Test-Path "TestResults\test-results.trx") {
            $content = Get-Content "TestResults\test-results.trx" -Raw
            if ($content -match 'outcome="Failed"') {
              Write-Host "❌ Some tests failed!"
              exit 1
            } else {
              Write-Host "✅ All tests passed!"
            }
          } else {
            Write-Host "⚠️ Could not verify test results"
            exit 1
          }

  # Job for reporting status
  report-status:
    name: Report Status
    runs-on: windows-latest
    needs: test
    if: always()
    
    steps:
      - name: 📢 Report Success
        if: needs.test.result == 'success'
        run: |
          echo "::notice::✅ All API tests passed successfully!"
          
      - name: 📢 Report Failure
        if: needs.test.result == 'failure'
        run: |
          echo "::error::❌ Some API tests failed. Please check the test results."
          exit 1